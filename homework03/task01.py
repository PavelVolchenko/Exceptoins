"""     Приложение будет запрашивать у пользователя данные в произвольном порядке, разделенные пробелом:
        Фамилия Имя Отчество, дата рождения, номер телефона, пол

        Форматы данных:
        фамилия, имя, отчество - строки
        дата рождения - строка формата dd.mm.yyyy
        номер телефона - целое беззнаковое число без форматирования
        пол - символ латиницей f или m.

        Проверить введенные данные по количеству. Если количество не совпадает с требуемым, вернуть код ошибки,
        обработать его и показать пользователю сообщение, что он ввел меньше и больше данных, чем требуется.

        Распарсить полученные значения и выделить из них требуемые параметры. Если форматы данных не совпадают,
        нужно бросить исключение, соответствующее типу проблемы. Исключение должно быть корректно обработано,
        пользователю выведено сообщение с информацией, что именно неверно.

        Если всё введено и обработано верно, должен создаться файл с названием, равным фамилии,
        в него в одну строку должны записаться полученные данные, вида
        <Фамилия><Имя><Отчество><дата-рождения><номер-телефона><пол>
        Однофамильцы должны записаться в один и тот же файл, в отдельные строки.

        Не забудьте закрыть соединение с файлом.                                                                    """
import datetime


def new_user():
    print("Введите ФИО, дату рождения, номер телефона и пол в одну строку через пробел")
    user_info = input(" -> ").split()

    if len(user_info) < 6:
        raise Exception("Введенных данных меньше, чем требуется!")
    elif len(user_info) > 6:
        raise Exception("Введенных данных больше, чем требуется!")

    for c in user_info[:3]:
        if not c.isalpha():
            raise Exception("ФИО не может содержать числа, знаки, спец. символы и т.п.")
    user_name = ' '.join(user_info[:3]).upper()
    print(f"<{user_name}>", end='')

    if len(user_info[3].split('.')) != 3:
        raise Exception("Ошибка! Дата рождения должна быть формата - ДД.ММ.ГГГГ")
    for n in user_info[3].split('.'):
        if not n.isdigit():
            raise Exception("Дата рождения может содержать только числа записанные через точку.")
    try:
        birthday = user_info[3].split('.')
        birthday = datetime.date(year=int(birthday[2]), month=int(birthday[1]), day=int(birthday[0]))\
            .strftime('%d.%m.%Y')
        print(f"<{birthday}>", end='')
    except ValueError as v:
        print(f"\nВведен не верный формат даты рождения {v.args}")

    if not user_info[4].isdigit() or len(user_info[4]) != 10:
        raise Exception("Номер телефона может содержать только 10 цифр, без когда страны -> 9280001122")
    print(f"<{user_info[4]}>", end='')

    if user_info[5] not in ["m", "f"]:
        raise Exception("Ошибка! Пол это одна латинская буква m или f")
    print(f"<{user_info[5].upper()}>", end='')

    with open(f'{user_info[0].lower()}.txt', 'a', encoding='UTF-8') as file:
        file.write(f'<{user_name}><{birthday}><{user_info[4]}><{user_info[5].upper()}>\n')


new_user()



